import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from db import cursor, conn, ADMIN_GROUP_ID, logger
from states import user_states, find_age_requirement

REJECT_REASON, MANAGER_MESSAGE = range(2)

# –î–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é —Ñ–æ—Ç–æ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∞–ª—å–±–æ–º—É
pending_albums = {}  # media_group_id: {"user_id", "order_id", "stage", "photos"}

def create_order_in_db(user_id: int, username: str, bank: str, action: str) -> int:
    cursor.execute(
        "INSERT INTO orders (user_id, username, bank, action, stage, status) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, username, bank, action, 0, "–ù–∞ –µ—Ç–∞–ø—ñ 1")
    )
    conn.commit()
    return cursor.lastrowid

def update_order_stage_db(order_id: int, new_stage: int, status: str = None):
    if status is None:
        cursor.execute("UPDATE orders SET stage=? WHERE id=?", (new_stage, order_id))
    else:
        cursor.execute("UPDATE orders SET stage=?, status=? WHERE id=?", (new_stage, status, order_id))
    conn.commit()

def set_order_group_db(order_id: int, group_chat_id: int):
    cursor.execute("UPDATE orders SET group_id=? WHERE id=?", (group_chat_id, order_id))
    conn.commit()

def free_group_db_by_chatid(group_chat_id: int):
    cursor.execute("UPDATE manager_groups SET busy=0 WHERE group_id=?", (group_chat_id,))
    conn.commit()

def occupy_group_db_by_dbid(group_db_id: int):
    cursor.execute("UPDATE manager_groups SET busy=1 WHERE id=?", (group_db_id,))
    conn.commit()

def get_free_groups(limit: int = None):
    q = "SELECT id, group_id FROM manager_groups WHERE busy=0 ORDER BY id ASC"
    if limit:
        q += f" LIMIT {limit}"
    cursor.execute(q)
    return cursor.fetchall()

def pop_queue_next():
    cursor.execute("SELECT id, user_id, username, bank, action FROM queue ORDER BY id ASC LIMIT 1")
    row = cursor.fetchone()
    if not row:
        return None
    qid, user_id, username, bank, action = row
    cursor.execute("DELETE FROM queue WHERE id=?", (qid,))
    conn.commit()
    return (user_id, username, bank, action)

def enqueue_user(user_id: int, username: str, bank: str, action: str):
    cursor.execute("INSERT INTO queue (user_id, username, bank, action) VALUES (?, ?, ?, ?)",
                   (user_id, username, bank, action))
    conn.commit()

def get_last_order_for_user(user_id: int):
    cursor.execute("SELECT id, bank, action, stage, status, group_id FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (user_id,))
    return cursor.fetchone()

def get_order_by_id(order_id: int):
    cursor.execute("SELECT id, user_id, username, bank, action, stage, status, group_id FROM orders WHERE id=?", (order_id,))
    return cursor.fetchone()

def get_photos_for_order_stage(order_id: int, stage: int):
    cursor.execute("SELECT id, file_id, confirmed FROM order_photos WHERE order_id=? AND stage=?", (order_id, stage))
    return cursor.fetchall()

async def assign_group_or_queue(order_id: int, user_id: int, username: str, bank: str, action: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    cursor.execute("SELECT id, group_id, name FROM manager_groups WHERE busy=0 ORDER BY id ASC LIMIT 1")
    free_group = cursor.fetchone()
    if free_group:
        group_db_id, group_chat_id, group_name = free_group
        try:
            occupy_group_db_by_dbid(group_db_id)
            set_order_group_db(order_id, group_chat_id)
            logger.info("Order %s assigned to group %s (%s)", order_id, group_chat_id, group_name)
            msg = f"üì¢ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ @{username} (ID: {user_id})\nüè¶ {bank} ‚Äî {action}\nOrderID: {order_id}"
            try:
                await context.bot.send_message(chat_id=group_chat_id, text=msg)
            except Exception as e:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É %s: %s", group_chat_id, e)
            return True
        except Exception as e:
            logger.exception("assign_group_or_queue error while assigning: %s", e)
            return False
    else:
        try:
            enqueue_user(user_id, username, bank, action)
            try:
                await context.bot.send_message(chat_id=user_id, text="‚è≥ –£—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–∞–π–Ω—è—Ç—ñ. –í–∏ –≤ —á–µ—Ä–∑—ñ. –û—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∑–≤—ñ–ª—å–Ω–∏—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.")
            except Exception:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–µ—Ä–∑—ñ (ID=%s)", user_id)
            logger.info("User %s (order %s) enqueued", user_id, order_id)
        except Exception as e:
            logger.exception("assign_group_or_queue error while enqueue: %s", e)
        return False

async def assign_queued_clients_to_free_groups(context: ContextTypes.DEFAULT_TYPE):
    try:
        free_groups = get_free_groups()
        if not free_groups:
            return

        for group_db_id, group_chat_id in free_groups:
            next_client = pop_queue_next()
            if not next_client:
                break
            user_id, username, bank, action = next_client

            new_order_id = create_order_in_db(user_id, username, bank, action)

            try:
                occupy_group_db_by_dbid(group_db_id)
                set_order_group_db(new_order_id, group_chat_id)
            except Exception as e:
                logger.exception("Error occupying group or setting order group: %s", e)

            user_states[user_id] = {"order_id": new_order_id, "bank": bank, "action": action, "stage": 0, "age_required": find_age_requirement(bank, action)}
            try:
                await context.bot.send_message(chat_id=user_id, text="‚úÖ –ó–≤—ñ–ª—å–Ω–∏–ª–æ—Å—è –º—ñ—Å—Ü–µ! –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.")
                await send_instruction(user_id, context)
            except Exception as e:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏: %s", e)
    except Exception as e:
        logger.exception("assign_queued_clients_to_free_groups error: %s", e)

async def send_instruction(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    from states import INSTRUCTIONS
    state = user_states.get(user_id)
    if not state:
        row = get_last_order_for_user(user_id)
        if not row:
            logger.warning("send_instruction: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %s", user_id)
            try:
                await context.bot.send_message(chat_id=user_id, text="‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start")
            except Exception:
                pass
            return
        order_id, bank, action, stage, status, group_id = row[0], row[1], row[2], row[3], row[4], row[5]
        user_states[user_id] = {"order_id": order_id, "bank": bank, "action": action, "stage": stage, "age_required": find_age_requirement(bank, action)}
        state = user_states[user_id]

    order_id = state.get("order_id")
    bank = state.get("bank")
    action = state.get("action")
    stage = state.get("stage", 0)

    steps = INSTRUCTIONS.get(bank, {}).get(action, [])
    if not steps:
        update_order_stage_db(order_id, stage, status="–ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ")
        logger.warning("No instructions for %s %s (order %s)", bank, action, order_id)
        try:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –±–∞–Ω–∫—É/–æ–ø–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=f"‚ö†Ô∏è –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –Ω–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: {bank} {action}")
        except Exception:
            pass
        return

    if stage >= len(steps):
        update_order_stage_db(order_id, stage, status="–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        order = get_order_by_id(order_id)
        if order:
            group_chat_id = order[7]
            if group_chat_id:
                try:
                    free_group_db_by_chatid(group_chat_id)
                except Exception:
                    pass
        try:
            await context.bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ!")
            await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –≤–∏–∫–æ–Ω–∞–Ω–æ –¥–ª—è @{order[2]} (ID: {order[1]})")
        except Exception:
            pass
        user_states.pop(user_id, None)
        try:
            await assign_queued_clients_to_free_groups(context)
        except Exception:
            pass
        return

    step = steps[stage]
    text = step.get("text", "") if isinstance(step, dict) else str(step)
    images = step.get("images", []) if isinstance(step, dict) else []

    update_order_stage_db(order_id, stage, status=f"–ù–∞ –µ—Ç–∞–ø—ñ {stage+1}")

    if text:
        await context.bot.send_message(chat_id=user_id, text=text)

    for img in images:
        try:
            if isinstance(img, str) and os.path.exists(img):
                with open(img, "rb") as f:
                    await context.bot.send_photo(chat_id=user_id, photo=f)
            else:
                await context.bot.send_photo(chat_id=user_id, photo=img)
        except Exception as e:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è %s –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s: %s", img, user_id, e)

async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    media_group_id = getattr(update.message, "media_group_id", None)
    user = update.message.from_user
    user_id = user.id
    username = user.username or "–ë–µ–∑_–Ω—ñ–∫–∞"
    state = user_states.get(user_id)
    stage = state.get("stage", 0) if state else 0

    if not state:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –∫–æ–º–∞–Ω–¥–æ—é /start")
        return

    order_id = state.get("order_id")
    if not order_id:
        cursor.execute("SELECT id FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (user_id,))
        r = cursor.fetchone()
        if not r:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.")
            return
        order_id = r[0]
        user_states[user_id]["order_id"] = order_id

    # --- –ê–ù–¢–ò–î–£–ë–õ–¨ –¥–ª—è –∞–ª—å–±–æ–º—ñ–≤ —Ç–∞ –∫—ñ–ª—å–∫–æ—Ö —Ñ–æ—Ç–æ ---
    # –Ø–∫—â–æ —Ü–µ –∞–ª—å–±–æ–º
    if media_group_id:
        album_key = f"{user_id}:{order_id}:{stage+1}:{media_group_id}"
        album = pending_albums.setdefault(album_key, [])
        for photo in update.message.photo:
            file_id = photo.file_id
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å —É –±–∞–∑—ñ
            cursor.execute(
                "SELECT COUNT(*) FROM order_photos WHERE order_id=? AND stage=? AND file_id=?",
                (order_id, stage + 1, file_id)
            )
            already_exists = cursor.fetchone()[0]
            if already_exists:
                continue
            album.append(file_id)
            cursor.execute(
                "INSERT INTO order_photos (order_id, stage, file_id, confirmed) VALUES (?, ?, ?, ?)",
                (order_id, stage + 1, file_id, 0)
            )
            conn.commit()
        # –î–æ–¥–∞—î–º–æ –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ñ–æ—Ç–æ –∑ –∞–ª—å–±–æ–º—É
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ –û–î–ò–ù –†–ê–ó –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–∏–π–æ–º—É –∞–ª—å–±–æ–º—É
        # –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –∞–±–æ —è–∫ –º–µ–¥—ñ–∞–≥—Ä—É–ø—É)
        # –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—î —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º—É (Telegram —Å–∞–º –Ω–µ –¥–∞—î —Å–∏–≥–Ω–∞–ª—É), –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ –∫–æ–∂–Ω–æ–º—É –∞–ø–¥–µ–π—Ç—É, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü—å–æ–≥–æ file_id —â–µ –Ω–µ –±—É–ª–æ.
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ (–∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É)
        for idx, file_id in enumerate(album, start=1):
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{user_id}_{cursor.lastrowid}"),
                 InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}_{cursor.lastrowid}")],
                [InlineKeyboardButton("‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –µ—Ç–∞–ø", callback_data=f"skip_{user_id}_{stage+1}")],
                [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"finish_{user_id}")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data=f"msg_{user_id}")]
            ])
            caption = (
                f"üìå <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∫—Ä—ñ–Ω—É (–∞–ª—å–±–æ–º, {idx} —ñ–∑ {len(album)})</b>\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username} (ID: {user_id})\n"
                f"üè¶ –ë–∞–Ω–∫: {state.get('bank')}\n"
                f"üîÑ –û–ø–µ—Ä–∞—Ü—ñ—è: {state.get('action')}\n"
                f"üìç –ï—Ç–∞–ø: {stage+1}\n"
            )
            try:
                await context.bot.send_photo(chat_id=ADMIN_GROUP_ID, photo=file_id, caption=caption, parse_mode="HTML", reply_markup=keyboard)
            except Exception as e:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É: %s", e)
        await update.message.reply_text("‚úÖ –í–∞—à—ñ —Å–∫—Ä—ñ–Ω–∏ (–∞–ª—å–±–æ–º) –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        return

    # –Ø–∫—â–æ —Ü–µ –ù–ï –∞–ª—å–±–æ–º (–æ–¥–Ω–µ —á–∏ –∫—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ)
    photo_ids = [photo.file_id for photo in update.message.photo]
    for idx, file_id in enumerate(photo_ids, start=1):
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å —É –±–∞–∑—ñ
        cursor.execute(
            "SELECT COUNT(*) FROM order_photos WHERE order_id=? AND stage=? AND file_id=?",
            (order_id, stage + 1, file_id)
        )
        already_exists = cursor.fetchone()[0]
        if already_exists:
            continue
        cursor.execute(
            "INSERT INTO order_photos (order_id, stage, file_id, confirmed) VALUES (?, ?, ?, ?)",
            (order_id, stage + 1, file_id, 0)
        )
        conn.commit()
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{user_id}_{cursor.lastrowid}"),
             InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}_{cursor.lastrowid}")],
            [InlineKeyboardButton("‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –µ—Ç–∞–ø", callback_data=f"skip_{user_id}_{stage+1}")],
            [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"finish_{user_id}")],
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data=f"msg_{user_id}")]
        ])
        caption = (
            f"üìå <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∫—Ä—ñ–Ω—É ({idx} —ñ–∑ {len(photo_ids)})</b>\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username} (ID: {user_id})\n"
            f"üè¶ –ë–∞–Ω–∫: {state.get('bank')}\n"
            f"üîÑ –û–ø–µ—Ä–∞—Ü—ñ—è: {state.get('action')}\n"
            f"üìç –ï—Ç–∞–ø: {stage+1}\n"
        )
        try:
            await context.bot.send_photo(chat_id=ADMIN_GROUP_ID, photo=file_id, caption=caption, parse_mode="HTML", reply_markup=keyboard)
        except Exception as e:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É: %s", e)

    cursor.execute("UPDATE orders SET status=?, stage=? WHERE id=?",
                   (f"–û—á—ñ–∫—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–µ—Ç–∞–ø {stage+1})", stage, order_id))
    conn.commit()

    await update.message.reply_text("‚úÖ –í–∞—à—ñ —Å–∫—Ä—ñ–Ω–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    raw = query.data

    try:
        action, str_user_id, *rest = raw.split("_")
        user_id = int(str_user_id)
    except Exception:
        try:
            await query.edit_message_caption(caption="‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
        except Exception:
            pass
        return

    state = user_states.get(user_id)
    if not state:
        cursor.execute("SELECT id, bank, action, stage FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (user_id,))
        r = cursor.fetchone()
        if r:
            order_id, bank, action_db, stage = r
            user_states[user_id] = {"order_id": order_id, "bank": bank, "action": action_db, "stage": stage, "age_required": find_age_requirement(bank, action_db)}
        else:
            try:
                await query.edit_message_caption(caption="‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ—Å—ñ—ó")
            except Exception:
                pass
            return

    order_id = user_states[user_id].get("order_id")

    if action == "approve":
        photo_db_id = int(rest[0])
        cursor.execute("UPDATE order_photos SET confirmed=1 WHERE id=?", (photo_db_id,))
        conn.commit()

        cursor.execute("SELECT COUNT(*) FROM order_photos WHERE order_id=? AND stage=? AND confirmed=1", (order_id, user_states[user_id]['stage']+1))
        confirmed = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM order_photos WHERE order_id=? AND stage=?", (order_id, user_states[user_id]['stage']+1))
        total = cursor.fetchone()[0]

        message = f"{confirmed} –∑ {total} —Å–∫—Ä—ñ–Ω—ñ–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"
        await update.effective_chat.send_message(message)
        await query.edit_message_caption(caption=f"‚úÖ –°–∫—Ä—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ\n{message}")

    elif action == "reject":
        photo_db_id = int(rest[0])
        context.user_data['reject_user_id'] = user_id
        context.user_data['photo_db_id'] = photo_db_id
        await query.edit_message_caption(caption="‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —É —á–∞—Ç.")
        return REJECT_REASON

    elif action == "skip":
        stage = int(rest[0])
        user_states[user_id]['stage'] += 1
        order_id = user_states[user_id]['order_id']
        update_order_stage_db(order_id, user_states[user_id]['stage'])
        await send_instruction(user_id, context)
        await query.edit_message_caption(caption="‚Ü™Ô∏è –ï—Ç–∞–ø –ø—Ä–æ–ø—É—â–µ–Ω–æ")

    elif action == "finish":
        await context.bot.send_message(chat_id=user_id, text="üèÅ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
        await query.edit_message_caption(caption="üèÅ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    elif action == "msg":
        context.user_data['msg_user_id'] = user_id
        await query.edit_message_caption(caption="üí¨ –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —á–∞—Ç.")
        return MANAGER_MESSAGE

    return ConversationHandler.END

async def reject_reason_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = context.user_data['reject_user_id']
    reason = update.message.text
    await update.effective_chat.send_message(f"‚ùå –í–∞—à —Å–∫—Ä—ñ–Ω –±—É–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await update.message.reply_text(f"–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {reason}")
    return ConversationHandler.END

async def manager_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = context.user_data['msg_user_id']
    message = update.message.text
    await update.effective_chat.send_message(f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {message}")
    await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    return ConversationHandler.END