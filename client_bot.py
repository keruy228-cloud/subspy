#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π Telegram-–±–æ—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å (—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è/–ø–µ—Ä–µ–≤'—è–∑–∫–∞),
–∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤, —á–µ—Ä–≥–æ—é, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —Ñ–æ—Ç–æ, –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è–º –µ—Ç–∞–ø—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—Ç–æ—Ä–æ–º
—Ç–∞ –∑–±–æ—Ä–æ–º –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é.

–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –∑–∞–ø—É—Å–∫—É:
- –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –∑–∞–º—ñ–Ω—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è BOT_TOKEN –Ω–∏–∂—á–µ.
- –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –∑–º—ñ–Ω—ñ—Ç—å ADMIN_GROUP_ID —Ç–∞ ADMIN_ID –∞–±–æ —Ç–µ–∂ –∑–∞–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ ENV.
- –§–∞–π–ª instructions.py –ø–æ–≤–∏–Ω–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ INSTRUCTIONS —É —Ñ–æ—Ä–º–∞—Ç—ñ:
  INSTRUCTIONS = {"BankName": {"register": [...], "change": [...]}, ...}
"""

import os
import sys
import sqlite3
import logging
from typing import Optional, Tuple, List, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters, ConversationHandler
)

# –ü–æ–ø—É–ª—è—Ä–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π (–ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª instructions.py)
try:
    from instructions import INSTRUCTIONS
except Exception:
    INSTRUCTIONS = {}  # –Ø–∫—â–æ –Ω–µ–º–∞—î - –±–æ—Ç –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ, –∞–ª–µ –±–∞–Ω–∫–∏ –±—É–¥—É—Ç—å –ø—É—Å—Ç—ñ.

# ====== –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ======
BOT_TOKEN = "8303921633:AAFu3nvim6qggmkIq2ghg5EMrT-8RhjoP50"
ADMIN_GROUP_ID = -4930176305
ADMIN_ID = 7797088374

LOCK_FILE = "bot.lock"
DB_FILE = os.getenv("DB_FILE", "orders.db")

# ====== –õ–æ–≥—É–≤–∞–Ω–Ω—è ======
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ====== –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É ======
if os.path.exists(LOCK_FILE):
    print("‚ö†Ô∏è bot.lock –≤–∏—è–≤–ª–µ–Ω–æ ‚Äî –π–º–æ–≤—ñ—Ä–Ω–æ –±–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É.")
    sys.exit(1)
open(LOCK_FILE, "w").close()


# ====== –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ======
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
cursor.execute("""
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    bank TEXT,
    action TEXT,
    stage INTEGER DEFAULT 0,
    status TEXT,
    group_id INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS order_photos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER,
    stage INTEGER,
    file_id TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS cooperation_requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    text TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS manager_groups (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    group_id INTEGER UNIQUE,
    name TEXT,
    busy INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS queue (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    bank TEXT,
    action TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

# ====== –î–∏–Ω–∞–º—ñ—á–Ω—ñ —Å–ø–∏—Å–∫–∏ –±–∞–Ω–∫—ñ–≤ ======
BANKS_REGISTER = [bank for bank, actions in INSTRUCTIONS.items() if "register" in actions and actions["register"]]
BANKS_CHANGE = [bank for bank, actions in INSTRUCTIONS.items() if "change" in actions and actions["change"]]

# ====== Runtime state (—Ç–∏–º—á–∞—Å–æ–≤–æ, –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ) ======
user_states: Dict[int, Dict[str, Any]] = {}  # user_id -> {"order_id", "bank", "action", "stage", "age_required"}

# ====== Conversation states ======
COOPERATION_INPUT = 0


# ====== –£—Ç–∏–ª—ñ—Ç–∏ –ë–î/–ª–æ–≥—ñ–∫–∏ ======
def find_age_requirement(bank: str, action: str) -> Optional[int]:
    steps = INSTRUCTIONS.get(bank, {}).get(action, [])
    for step in steps:
        if isinstance(step, dict) and "age" in step:
            return step["age"]
    return None

def create_order_in_db(user_id: int, username: str, bank: str, action: str) -> int:
    cursor.execute(
        "INSERT INTO orders (user_id, username, bank, action, stage, status) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, username, bank, action, 0, "–ù–∞ –µ—Ç–∞–ø—ñ 1")
    )
    conn.commit()
    return cursor.lastrowid

def update_order_stage_db(order_id: int, new_stage: int, status: Optional[str] = None):
    if status is None:
        cursor.execute("UPDATE orders SET stage=? WHERE id=?", (new_stage, order_id))
    else:
        cursor.execute("UPDATE orders SET stage=?, status=? WHERE id=?", (new_stage, status, order_id))
    conn.commit()

def set_order_group_db(order_id: int, group_chat_id: int):
    cursor.execute("UPDATE orders SET group_id=? WHERE id=?", (group_chat_id, order_id))
    conn.commit()

def free_group_db_by_chatid(group_chat_id: int):
    cursor.execute("UPDATE manager_groups SET busy=0 WHERE group_id=?", (group_chat_id,))
    conn.commit()

def occupy_group_db_by_dbid(group_db_id: int):
    cursor.execute("UPDATE manager_groups SET busy=1 WHERE id=?", (group_db_id,))
    conn.commit()

def get_free_groups(limit: Optional[int] = None):
    q = "SELECT id, group_id FROM manager_groups WHERE busy=0 ORDER BY id ASC"
    if limit:
        q += f" LIMIT {limit}"
    cursor.execute(q)
    return cursor.fetchall()

def pop_queue_next():
    cursor.execute("SELECT id, user_id, username, bank, action FROM queue ORDER BY id ASC LIMIT 1")
    row = cursor.fetchone()
    if not row:
        return None
    qid, user_id, username, bank, action = row
    cursor.execute("DELETE FROM queue WHERE id=?", (qid,))
    conn.commit()
    return (user_id, username, bank, action)

def enqueue_user(user_id: int, username: str, bank: str, action: str):
    cursor.execute("INSERT INTO queue (user_id, username, bank, action) VALUES (?, ?, ?, ?)",
                   (user_id, username, bank, action))
    conn.commit()

def get_last_order_for_user(user_id: int) -> Optional[Tuple]:
    cursor.execute("SELECT id, bank, action, stage, status, group_id FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (user_id,))
    return cursor.fetchone()

def get_order_by_id(order_id: int) -> Optional[Tuple]:
    cursor.execute("SELECT id, user_id, username, bank, action, stage, status, group_id FROM orders WHERE id=?", (order_id,))
    return cursor.fetchone()


# ====== –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≥—Ä—É–ø/—á–µ—Ä–≥–∏ (–º–∞—î –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –î–û –≤–∏–∫–ª–∏–∫—ñ–≤) ======
async def assign_group_or_queue(order_id: int, user_id: int, username: str, bank: str, action: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    cursor.execute("SELECT id, group_id, name FROM manager_groups WHERE busy=0 ORDER BY id ASC LIMIT 1")
    free_group = cursor.fetchone()
    if free_group:
        group_db_id, group_chat_id, group_name = free_group
        try:
            occupy_group_db_by_dbid(group_db_id)
            set_order_group_db(order_id, group_chat_id)
            logger.info("Order %s assigned to group %s (%s)", order_id, group_chat_id, group_name)
            msg = f"üì¢ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ @{username} (ID: {user_id})\nüè¶ {bank} ‚Äî {action}\nOrderID: {order_id}"
            try:
                await context.bot.send_message(chat_id=group_chat_id, text=msg)
            except Exception as e:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É %s: %s", group_chat_id, e)
            return True
        except Exception as e:
            logger.exception("assign_group_or_queue error while assigning: %s", e)
            return False
    else:
        try:
            enqueue_user(user_id, username, bank, action)
            try:
                await context.bot.send_message(chat_id=user_id, text="‚è≥ –£—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–∞–π–Ω—è—Ç—ñ. –í–∏ –≤ —á–µ—Ä–∑—ñ. –û—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∑–≤—ñ–ª—å–Ω–∏—Ç—å—Å—è –º—ñ—Å—Ü–µ.")
            except Exception:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–µ—Ä–∑—ñ (ID=%s)", user_id)
            logger.info("User %s (order %s) enqueued", user_id, order_id)
        except Exception as e:
            logger.exception("assign_group_or_queue error while enqueue: %s", e)
        return False

# ====== –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏ –¥–ª—è –≤—Å—ñ—Ö –≤—ñ–ª—å–Ω–∏—Ö –≥—Ä—É–ø ======
async def assign_queued_clients_to_free_groups(context: ContextTypes.DEFAULT_TYPE):
    try:
        free_groups = get_free_groups()
        if not free_groups:
            return

        for group_db_id, group_chat_id in free_groups:
            next_client = pop_queue_next()
            if not next_client:
                break
            user_id, username, bank, action = next_client

            new_order_id = create_order_in_db(user_id, username, bank, action)

            try:
                occupy_group_db_by_dbid(group_db_id)
                set_order_group_db(new_order_id, group_chat_id)
            except Exception as e:
                logger.exception("Error occupying group or setting order group: %s", e)

            user_states[user_id] = {"order_id": new_order_id, "bank": bank, "action": action, "stage": 0, "age_required": find_age_requirement(bank, action)}
            try:
                await context.bot.send_message(chat_id=user_id, text="‚úÖ –ó–≤—ñ–ª—å–Ω–∏–ª–æ—Å—è –º—ñ—Å—Ü–µ! –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.")
                await send_instruction(user_id, context)
            except Exception as e:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏: %s", e)
    except Exception as e:
        logger.exception("assign_queued_clients_to_free_groups error: %s", e)

# ====== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ======
async def send_instruction(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
    –Ø–∫—â–æ –µ—Ç–∞–ø—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î ‚Äî –∑–∞–≤–µ—Ä—à—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∑–≤—ñ–ª—å–Ω—è—î –≥—Ä—É–ø—É —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î –∞–¥–º—ñ–Ω—ñ–≤.
    """
    state = user_states.get(user_id)
    if not state:
        # —Å–ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ë–î
        row = get_last_order_for_user(user_id)
        if not row:
            logger.warning("send_instruction: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %s", user_id)
            try:
                await context.bot.send_message(chat_id=user_id, text="‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start")
            except Exception:
                pass
            return
        order_id, bank, action, stage, status, group_id = row[0], row[1], row[2], row[3], row[4], row[5]
        user_states[user_id] = {"order_id": order_id, "bank": bank, "action": action, "stage": stage, "age_required": find_age_requirement(bank, action)}
        state = user_states[user_id]

    order_id = state.get("order_id")
    bank = state.get("bank")
    action = state.get("action")
    stage = state.get("stage", 0)

    steps = INSTRUCTIONS.get(bank, {}).get(action, [])
    if not steps:
        # –ù–µ–º–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∞–¥–º—ñ–Ω—É
        update_order_stage_db(order_id, stage, status="–ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ")
        logger.warning("No instructions for %s %s (order %s)", bank, action, order_id)
        try:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –±–∞–Ω–∫—É/–æ–ø–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
            await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=f"‚ö†Ô∏è –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –Ω–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: {bank} {action}")
        except Exception:
            pass
        return

    # –ö–æ–ª–∏ stage >= len(steps) ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    if stage >= len(steps):
        update_order_stage_db(order_id, stage, status="–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        # –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –≥—Ä—É–ø—É
        order = get_order_by_id(order_id)
        if order:
            group_chat_id = order[7]
            if group_chat_id:
                try:
                    free_group_db_by_chatid(group_chat_id)
                except Exception:
                    pass
        # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ç–∞ –∞–¥–º—ñ–Ω—É
        try:
            await context.bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ!")
            await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –≤–∏–∫–æ–Ω–∞–Ω–æ –¥–ª—è @{order[2]} (ID: {order[1]})")
        except Exception:
            pass
        # –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é
        user_states.pop(user_id, None)
        # –ø—ñ—Å–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –≥—Ä—É–ø–∏ ‚Äî –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑ —á–µ—Ä–≥–∏
        try:
            await assign_queued_clients_to_free_groups(context)
        except Exception:
            pass
        return

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫
    step = steps[stage]
    if isinstance(step, dict):
        text = step.get("text", "")
        images = step.get("images", [])
    else:
        text = str(step)
        images = []

    # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    update_order_stage_db(order_id, stage, status=f"–ù–∞ –µ—Ç–∞–ø—ñ {stage+1}")

    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç
    if text:
        try:
            await context.bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s: %s", user_id, e)

    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—à–ª—è—Ö –∞–±–æ file_id)
    for img in images:
        try:
            if isinstance(img, str) and os.path.exists(img):
                with open(img, "rb") as f:
                    await context.bot.send_photo(chat_id=user_id, photo=f)
            else:
                # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ file_id –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, bot —Å–ø—Ä–æ–±—É—î –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–∞–∫
                await context.bot.send_photo(chat_id=user_id, photo=img)
        except Exception as e:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è %s –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s: %s", img, user_id, e)

# ====== –•–µ–Ω–¥–ª–µ—Ä–∏ –º–µ–Ω—é / –ª–æ–≥—ñ–∫–∞ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ñ –±–∞–Ω–∫–∏", callback_data="menu_banks")],
        [InlineKeyboardButton("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –æ–ø–ª–∞—Ç–∞", callback_data="menu_info")],
        [InlineKeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é", callback_data="menu_coop")]
    ]
    if update.message:
        await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
        except Exception:
            pass

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "menu_banks":
        keyboard = [
            [InlineKeyboardButton("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="type_register")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–≤ º—è–∑–∫–∞", callback_data="type_change")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data == "menu_info":
        info_text = (
            "üí≥ –û–ø–ª–∞—Ç–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É XXXX XXXX XXXX XXXX\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –≤ —á–∞—Ç.\n\n"
            "–Ø–∫—â–æ –º–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
        )
        await query.edit_message_text(info_text, reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        ))
        return

    if data == "back_to_main":
        await start(update, context)
        return

    if data in ("type_register", "type_change"):
        action = "register" if data == "type_register" else "change"
        banks = BANKS_REGISTER if action == "register" else BANKS_CHANGE
        keyboard = [[InlineKeyboardButton(bank, callback_data=f"bank_{bank}_{action}")] for bank in banks]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu_banks")])
        if not banks:
            await query.edit_message_text("–ù–∞—Ä–∞–∑—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu_banks")]]))
            return
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data.startswith("bank_"):
        try:
            _, bank, action = data.split("_", 2)
        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        user_id = query.from_user.id
        age_required = find_age_requirement(bank, action)
        user_states[user_id] = {"order_id": None, "bank": bank, "action": action, "stage": 0, "age_required": age_required}

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–∞–∫, —è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é –≤–∏–º–æ–≥–∞–º", callback_data="age_confirm_yes"),
             InlineKeyboardButton("–ù—ñ, —è –Ω–µ –ø—ñ–¥—Ö–æ–¥–∂—É", callback_data="age_confirm_no")]
        ])
        text = f"–í–∏ –æ–±—Ä–∞–ª–∏ –±–∞–Ω–∫ {bank} ({'–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' if action == 'register' else '–ü–µ—Ä–µ–≤ º—è–∑–∫–∞'}).\n"
        if age_required:
            text += f"üìÖ –í–∏–º–æ–≥–∞: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ ‚Äî {age_required} —Ä–æ–∫—ñ–≤.\n"
        text += "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ —Ü–∏–º –≤–∏–º–æ–≥–∞–º."
        await query.edit_message_text(text, reply_markup=keyboard)
        return

# ====== –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–∫—É ======
async def age_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    state = user_states.get(user_id)
    if not state:
        await query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start")
        return

    if data == "age_confirm_no":
        keyboard = [[InlineKeyboardButton(bank, callback_data=f"bank_{bank}_register")] for bank in BANKS_REGISTER] + \
                   [[InlineKeyboardButton(bank, callback_data=f"bank_{bank}_change")] for bank in BANKS_CHANGE]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")])
        await query.edit_message_text("–í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ –≤—ñ–∫–æ–≤–∏–º –≤–∏–º–æ–≥–∞–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –±–∞–Ω–∫.", reply_markup=InlineKeyboardMarkup(keyboard))
        user_states.pop(user_id, None)
        return

    bank = state["bank"]
    action = state["action"]
    username = query.from_user.username or "–ë–µ–∑_–Ω—ñ–∫–∞"

    order_id = create_order_in_db(user_id, username, bank, action)
    user_states[user_id].update({"order_id": order_id, "stage": 0})

    assigned = await assign_group_or_queue(order_id, user_id, username, bank, action, context)
    if not assigned:
        await query.edit_message_text("‚è≥ –£—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–∞–π–Ω—è—Ç—ñ. –í–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ –≤ —á–µ—Ä–≥—É. –û—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–ª–∏ –∑–≤—ñ–ª—å–Ω–∏—Ç—å—Å—è –º—ñ—Å—Ü–µ.")
        return

    await send_instruction(user_id, context)
    await query.edit_message_text("‚úÖ –í—ñ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.")

# ====== –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ======
async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    user = update.message.from_user
    user_id = user.id
    username = user.username or "–ë–µ–∑_–Ω—ñ–∫–∞"
    state = user_states.get(user_id)

    if not state:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –∫–æ–º–∞–Ω–¥–æ—é /start")
        return

    stage = state.get("stage", 0)
    order_id = state.get("order_id")
    if not order_id:
        cursor.execute("SELECT id FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (user_id,))
        r = cursor.fetchone()
        if not r:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.")
            return
        order_id = r[0]
        user_states[user_id]["order_id"] = order_id

    file_id = update.message.photo[-1].file_id
    cursor.execute("INSERT INTO order_photos (order_id, stage, file_id) VALUES (?, ?, ?)", (order_id, stage + 1, file_id))
    conn.commit()

    cursor.execute("UPDATE orders SET status=?, stage=? WHERE id=?", (f"–û—á—ñ–∫—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–µ—Ç–∞–ø {stage+1})", stage, order_id))
    conn.commit()

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{user_id}"),
         InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")],
        [InlineKeyboardButton("üí¨ –ó–≤ º—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º", url=f"https://t.me/{username}")]
    ])

    caption = (
        f"üìå <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∫—Ä—ñ–Ω—É</b>\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username} (ID: {user_id})\n"
        f"üè¶ –ë–∞–Ω–∫: {state.get('bank')}\n"
        f"üîÑ –û–ø–µ—Ä–∞—Ü—ñ—è: {state.get('action')}\n"
        f"üìç –ï—Ç–∞–ø: {stage+1}\n"
    )

    try:
        await context.bot.send_photo(chat_id=ADMIN_GROUP_ID, photo=file_id, caption=caption, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É: %s", e)

    await update.message.reply_text("‚úÖ –í–∞—à—ñ —Å–∫—Ä—ñ–Ω–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

# ====== –î—ñ—ó –∞–¥–º—ñ–Ω–∞: approve/reject ======
async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    raw = query.data

    try:
        action, str_user_id = raw.split("_", 1)
        user_id = int(str_user_id)
    except Exception:
        try:
            await query.edit_message_caption(caption="‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
        except Exception:
            pass
        return

    if user_id not in user_states:
        cursor.execute("SELECT id, bank, action, stage FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (user_id,))
        r = cursor.fetchone()
        if r:
            order_id, bank, action_db, stage = r
            user_states[user_id] = {"order_id": order_id, "bank": bank, "action": action_db, "stage": stage, "age_required": find_age_requirement(bank, action_db)}
        else:
            try:
                await query.edit_message_caption(caption="‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ—Å—ñ—ó")
            except Exception:
                pass
            return

    if action == "approve":
        user_states[user_id]["stage"] += 1
        order_id = user_states[user_id].get("order_id")
        if order_id:
            update_order_stage_db(order_id, user_states[user_id]["stage"])
        await send_instruction(user_id, context)
        try:
            await query.edit_message_caption(caption="‚úÖ –ï—Ç–∞–ø –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
        except Exception:
            pass

    elif action == "reject":
        try:
            await context.bot.send_message(chat_id=user_id, text=f"‚ùå –ï—Ç–∞–ø {user_states[user_id]['stage']+1} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        except Exception:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –≤—ñ–¥–º–æ–≤—É.")
        try:
            await query.edit_message_caption(caption="‚ùå –ï—Ç–∞–ø –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
        except Exception:
            pass

# ====== Cooperation handlers ======
async def cooperation_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úç –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à—É –∑–∞—è–≤–∫—É —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
    return COOPERATION_INPUT

async def cooperation_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text
    cursor.execute("INSERT INTO cooperation_requests (user_id, username, text) VALUES (?, ?, ?)", (user.id, user.username, text))
    conn.commit()

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üí¨ –ó–≤ º—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º", url=f"https://t.me/{user.username or user.id}")]])
    msg = f"üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'} (ID: {user.id})\nüìù –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:\n{text}"
    try:
        await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=msg, reply_markup=keyboard)
    except Exception:
        logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É.")
    await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–µ–¥–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ====== Admin: history ======
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = context.args
    if not args:
        cursor.execute("SELECT id, user_id, username, bank, action, status FROM orders ORDER BY id DESC LIMIT 10")
        orders = cursor.fetchall()
        if not orders:
            await update.message.reply_text("üì≠ –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.")
            return
        text = "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>\n\n"
        for o in orders:
            text += f"üÜî OrderID: {o[0]}\nüë§ UserID: {o[1]} (@{o[2]})\nüè¶ {o[3]} ‚Äî {o[4]}\nüìç {o[5]}\n\n"
        await update.message.reply_text(text, parse_mode="HTML")
        return

    try:
        target_id = int(args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    cursor.execute("SELECT id, bank, action FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (target_id,))
    order = cursor.fetchone()
    if not order:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    order_id = order[0]
    bank = order[1]
    action = order[2]
    await update.message.reply_text(f"üìÇ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\nüè¶ {bank} ‚Äî {action}", parse_mode="HTML")

    cursor.execute("SELECT stage, file_id FROM order_photos WHERE order_id=? ORDER BY stage ASC", (order_id,))
    photos = cursor.fetchall()
    for stage, file_id in photos:
        try:
            await update.message.reply_photo(photo=file_id, caption=f"–ï—Ç–∞–ø {stage}")
        except Exception:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∞–¥–º—ñ–Ω—É.")

# ====== Admin: groups management ======
async def add_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if len(context.args) < 2:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addgroup <group_id> <–Ω–∞–∑–≤–∞>")
    try:
        group_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    name = " ".join(context.args[1:])
    cursor.execute("INSERT OR IGNORE INTO manager_groups (group_id, name) VALUES (?, ?)", (group_id, name))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø—É '{name}' –¥–æ–¥–∞–Ω–æ")

async def del_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delgroup <group_id>")
    try:
        group_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    cursor.execute("DELETE FROM manager_groups WHERE group_id=?", (group_id,))
    conn.commit()
    await update.message.reply_text("‚úÖ –ì—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ")

async def list_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    cursor.execute("SELECT group_id, name, busy FROM manager_groups ORDER BY id ASC")
    groups = cursor.fetchall()
    if not groups:
        return await update.message.reply_text("üì≠ –ù–µ–º–∞—î –≥—Ä—É–ø")
    text = "üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø:\n"
    for gid, name, busy in groups:
        text += f"‚Ä¢ {name} ({gid}) ‚Äî {'üî¥ –ó–∞–π–Ω—è—Ç–∞' if busy else 'üü¢ –í—ñ–ª—å–Ω–∞'}\n"
    await update.message.reply_text(text)

# ====== Admin: queue viewing ======
async def show_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    cursor.execute("SELECT id, user_id, username, bank, action, created_at FROM queue ORDER BY id ASC")
    rows = cursor.fetchall()
    if not rows:
        return await update.message.reply_text("üì≠ –ß–µ—Ä–≥–∞ –ø—É—Å—Ç–∞.")
    text = "üìã –ß–µ—Ä–≥–∞:\n\n"
    for r in rows:
        text += f"#{r[0]} ‚Äî @{r[2]} (ID: {r[1]}) ‚Äî {r[3]} / {r[4]} ‚Äî {r[5]}\n"
    await update.message.reply_text(text)

# ====== User helper: status ======
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    order = get_last_order_for_user(user_id)
    if not order:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    order_id, bank, action, stage, status_text, group_id = order
    text = f"üìå OrderID: {order_id}\nüè¶ {bank} ‚Äî {action}\nüìç {status_text}\n–ï—Ç–∞–ø: {stage+1}"
    await update.message.reply_text(text)

# ====== Error handler ======
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("–û—à–∏–±–∫–∞ –≤ –∞–ø–ª—ñ–∫–∞—Ü—ñ—ó: %s", context.error)
    try:
        if update and getattr(update, "effective_chat", None):
            await update.effective_chat.send_message("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º.")
    except Exception:
        pass

# ====== –†–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—è handler-—ñ–≤ —ñ –∑–∞–ø—É—Å–∫ ======
def main():
    if BOT_TOKEN in ("", "CHANGE_ME_PLEASE"):
        print("ERROR: BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–¥–∞–π—Ç–µ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN.")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_error_handler(error_handler)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(main_menu_handler, pattern="^(menu_banks|menu_info|back_to_main|type_register|type_change|bank_.*)$"))
    app.add_handler(CallbackQueryHandler(age_confirm_handler, pattern="^age_confirm_.*$"))
    app.add_handler(CallbackQueryHandler(handle_admin_action, pattern="^(approve|reject)_.*$"))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photos))

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(cooperation_start_handler, pattern="menu_coop")],
        states={COOPERATION_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, cooperation_receive)]},
        fallbacks=[CommandHandler("cancel", cancel)],
        per_chat=True,
        per_message=True
    )
    app.add_handler(conv_handler)

    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("addgroup", add_group))
    app.add_handler(CommandHandler("delgroup", del_group))
    app.add_handler(CommandHandler("groups", list_groups))
    app.add_handler(CommandHandler("queue", show_queue))
    app.add_handler(CommandHandler("status", status))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    try:
        main()
    finally:
        try:
            if os.path.exists(LOCK_FILE):
                os.remove(LOCK_FILE)
        except Exception:
            pass
        try:
            conn.close()
        except Exception:
            pass