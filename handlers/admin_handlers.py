import os
from telegram import Update
from telegram.ext import ContextTypes
from db import cursor, conn, ADMIN_ID, ADMIN_GROUP_ID, logger
from handlers.photo_handlers import get_last_order_for_user
from states import user_states

ADMINS_FILE = "admins.txt"

def load_admins():
    """–ó—á–∏—Ç–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
    if not os.path.exists(ADMINS_FILE):
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª –∑ –ø–æ—Ç–æ—á–Ω–∏–º –∞–¥–º—ñ–Ω–æ–º, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        with open(ADMINS_FILE, "w") as f:
            # –î–æ–¥–∞—î–º–æ ADMIN_ID —è–∫ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞
            f.write(str(ADMIN_ID) + "\n")
    with open(ADMINS_FILE, "r") as f:
        return set(int(line.strip()) for line in f if line.strip().isdigit())

def save_admins(admins):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ —É —Ñ–∞–π–ª"""
    with open(ADMINS_FILE, "w") as f:
        for admin_id in admins:
            f.write(str(admin_id) + "\n")

def is_admin(user_id):
    return user_id in load_admins()

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    args = context.args
    if not args:
        cursor.execute("SELECT id, user_id, username, bank, action, status FROM orders ORDER BY id DESC LIMIT 10")
        orders = cursor.fetchall()
        if not orders:
            await update.message.reply_text("üì≠ –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.")
            return
        text = "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>\n\n"
        for o in orders:
            text += f"üÜî OrderID: {o[0]}\nüë§ UserID: {o[1]} (@{o[2]})\nüè¶ {o[3]} ‚Äî {o[4]}\nüìç {o[5]}\n\n"
        await update.message.reply_text(text, parse_mode="HTML")
        return

    try:
        target_id = int(args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    cursor.execute("SELECT id, bank, action FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1", (target_id,))
    order = cursor.fetchone()
    if not order:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    order_id = order[0]
    bank = order[1]
    action = order[2]
    await update.message.reply_text(f"üìÇ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\nüè¶ {bank} ‚Äî {action}", parse_mode="HTML")

    cursor.execute("SELECT stage, file_id FROM order_photos WHERE order_id=? ORDER BY stage ASC", (order_id,))
    photos = cursor.fetchall()
    for stage, file_id in photos:
        try:
            await update.message.reply_photo(photo=file_id, caption=f"–ï—Ç–∞–ø {stage}")
        except Exception:
            pass

async def add_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if len(context.args) < 2:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addgroup <group_id> <–Ω–∞–∑–≤–∞>")
    try:
        group_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    name = " ".join(context.args[1:])
    cursor.execute("INSERT OR IGNORE INTO manager_groups (group_id, name) VALUES (?, ?)", (group_id, name))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø—É '{name}' –¥–æ–¥–∞–Ω–æ")

async def del_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    if not context.args:
        return await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delgroup <group_id>")
    try:
        group_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    cursor.execute("DELETE FROM manager_groups WHERE group_id=?", (group_id,))
    conn.commit()
    await update.message.reply_text("‚úÖ –ì—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ")

async def list_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    cursor.execute("SELECT group_id, name, busy FROM manager_groups ORDER BY id ASC")
    groups = cursor.fetchall()
    if not groups:
        return await update.message.reply_text("üì≠ –ù–µ–º–∞—î –≥—Ä—É–ø")
    text = "üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø:\n"
    for gid, name, busy in groups:
        text += f"‚Ä¢ {name} ({gid}) ‚Äî {'üî¥ –ó–∞–π–Ω—è—Ç–∞' if busy else 'üü¢ –í—ñ–ª—å–Ω–∞'}\n"
    await update.message.reply_text(text)

async def show_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    cursor.execute("SELECT id, user_id, username, bank, action, created_at FROM queue ORDER BY id ASC")
    rows = cursor.fetchall()
    if not rows:
        return await update.message.reply_text("üì≠ –ß–µ—Ä–≥–∞ –ø—É—Å—Ç–∞.")
    text = "üìã –ß–µ—Ä–≥–∞:\n\n"
    for r in rows:
        text += f"#{r[0]} ‚Äî @{r[2]} (ID: {r[1]}) ‚Äî {r[3]} / {r[4]} ‚Äî {r[5]}\n"
    await update.message.reply_text(text)

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞: /add_admin <user_id>"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    args = context.args
    if not args or len(args) < 1:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å user_id –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞. –ü—Ä–∏–∫–ª–∞–¥: /add_admin 123456789")
        return
    try:
        new_admin_id = int(args[0])
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id.")
        return

    admins = load_admins()
    if new_admin_id in admins:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î –∞–¥–º—ñ–Ω–æ–º.")
        return

    admins.add(new_admin_id)
    save_admins(admins)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞: {new_admin_id}")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞: /remove_admin <user_id>"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    args = context.args
    if not args or len(args) < 1:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å user_id –∞–¥–º—ñ–Ω–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –ü—Ä–∏–∫–ª–∞–¥: /remove_admin 123456789")
        return
    try:
        remove_admin_id = int(args[0])
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id.")
        return

    admins = load_admins()
    if remove_admin_id not in admins:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º.")
        return

    admins.remove(remove_admin_id)
    save_admins(admins)
    await update.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω–∞: {remove_admin_id}")

async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤: /list_admins"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admins = load_admins()
    msg = "üõ°Ô∏è –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:\n" + "\n".join(str(a) for a in admins)
    await update.message.reply_text(msg)

async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        args = context.args
        if not args or len(args) < 1:
            await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å order_id. –ü—Ä–∏–∫–ª–∞–¥: /finish_order 123")
            return
        order_id = int(args[0])
        cursor.execute("SELECT user_id FROM orders WHERE id=? AND status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'", (order_id,))
        user_row = cursor.fetchone()
        if not user_row:
            await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            return
        client_user_id = user_row[0]
        cursor.execute("UPDATE orders SET status='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' WHERE id=?", (order_id,))
        conn.commit()
        user_states.pop(client_user_id, None)
        try:
            await context.bot.send_message(chat_id=client_user_id, text="üèÅ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception:
            pass
        await update.message.reply_text(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        logger.info(f"Order {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        logger.exception("finish_order error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

async def finish_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        cursor.execute("SELECT id, user_id FROM orders WHERE status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        rows = cursor.fetchall()
        if not rows:
            await update.message.reply_text("‚úÖ –ù–µ–º–∞—î –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return
        for order_id, client_user_id in rows:
            cursor.execute("UPDATE orders SET status='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' WHERE id=?", (order_id,))
            user_states.pop(client_user_id, None)
            try:
                await context.bot.send_message(chat_id=client_user_id, text="üèÅ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                pass
        conn.commit()
        await update.message.reply_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {len(rows)} —à—Ç.")
        logger.info(f"–í—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({len(rows)} —à—Ç).")
    except Exception as e:
        logger.exception("finish_all_orders error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")

async def orders_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        cursor.execute("SELECT COUNT(*) FROM orders")
        total = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        finished = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status!='–ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
        unfinished = cursor.fetchone()[0]
        msg = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å:\n"
            f"–í—Å—å–æ–≥–æ: {total}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {finished}\n"
            f"–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {unfinished}\n"
        )
        await update.message.reply_text(msg)
    except Exception as e:
        logger.exception("orders_stats error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    text = (
        "üõ°Ô∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "<b>/history [user_id]</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
        "<b>/addgroup &lt;group_id&gt; &lt;–Ω–∞–∑–≤–∞&gt;</b> ‚Äî –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.\n"
        "<b>/delgroup &lt;group_id&gt;</b> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É.\n"
        "<b>/groups</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø.\n"
        "<b>/queue</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —á–µ—Ä–≥—É –∑–∞–º–æ–≤–ª–µ–Ω—å.\n"
        "<b>/status</b> ‚Äî –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "<b>/finish_order &lt;order_id&gt;</b> ‚Äî –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–µ.\n"
        "<b>/finish_all_orders</b> ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "<b>/orders_stats</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º.\n"
        "<b>/add_admin &lt;user_id&gt;</b> ‚Äî –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "<b>/remove_admin &lt;user_id&gt;</b> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "<b>/list_admins</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.\n"
        "<b>/help</b> ‚Äî –î–æ–≤—ñ–¥–∫–∞ –ø–æ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∞–º.\n\n"
        "‚ÑπÔ∏è <b>–ü–æ—è—Å–Ω–µ–Ω–Ω—è:</b>\n"
        "- –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–∞—Ü—é—é—Ç—å —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –±–æ—Ç–∞.\n"
        "- –î–æ–¥–∞–≤–∞—Ç–∏/–≤–∏–¥–∞–ª—è—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤ –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ /add_admin —Ç–∞ /remove_admin.\n"
        "- –ì—Ä—É–ø–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–∞–º–æ–≤–ª–µ–Ω—å –º—ñ–∂ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏.\n"
        "- –ö–æ–º–∞–Ω–¥–∞ /history –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—É –ø–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å, –∑ user_id ‚Äî —ñ—Å—Ç–æ—Ä—ñ—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞.\n"
        "- –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø –ø–æ—Ç—Ä—ñ–±–µ–Ω —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–∏ (—á–∏—Å–ª–æ) —Ç–∞ –Ω–∞–∑–≤–∞.\n"
        "- /finish_order –¥–æ–∑–≤–æ–ª—è—î –≤—Ä—É—á–Ω—É –∑–∞–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, /finish_all_orders ‚Äî –º–∞—Å–æ–≤–æ.\n"
        "- /orders_stats –ø–æ–∫–∞–∑—É—î –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å.\n"
        "- /queue ‚Äî –ø–æ–∫–∞–∑—É—î —á–µ—Ä–≥—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.\n"
    )
    await update.message.reply_text(text, parse_mode="HTML")
